################################################
#                 WARNING!                     #
# This file has been auto-generated by xdress. #
# Do not modify!!!                             #
#                                              #
#                                              #
#                    Come on, guys. I mean it! #
################################################
"""
"""
cimport xdress_extra_types
from libc.stdlib cimport free





cdef class SimpleRNG:
    """
    
    Attributes
    ----------
    m_u (unsigned int) :
    m_v (unsigned int) :
    
    
    Methods
    -------
    GetBeta
    SimpleRNG
    GetCauchy
    GetChiSquare
    GetExponential
    GetGamma
    GetInverseGamma
    GetLaplace
    GetLogNormal
    GetNormal
    GetPoisson
    GetState
    GetStudentT
    GetUint
    GetUniform
    GetWeibull
    LogFactorial
    PoissonLarge
    PoissonSmall
    SetState
    
    Notes
    -----
    This class was defined in SimpleRNG.h
    
    The class is found in the "" namespace"""



    # constuctors
    def __cinit__(self, *args, **kwargs):
        self._inst = NULL
        self._free_inst = True

        # cached property defaults


    def __init__(self):
        """SimpleRNG(self)
        
        
        Parameters
        ----------
        None
        
        Returns
        -------
        None
        
        """
        self._inst = new cpp_SimpleRNG.SimpleRNG()
    
    
    def __dealloc__(self):
        if self._free_inst:
            free(self._inst)

    # attributes

    # methods
    def GetBeta(self, a, b):
        """GetBeta(self, a, b)
        
        
        Parameters
        ----------
        a : double
        
        b : double
        
        Returns
        -------
        res1 : double
        
        """
        cdef double rtnval
        rtnval = (<cpp_SimpleRNG.SimpleRNG *> self._inst).GetBeta(<double> a, <double> b)
        return float(rtnval)
    
    
    def GetCauchy(self, median, scale):
        """GetCauchy(self, median, scale)
        
        
        Parameters
        ----------
        scale : double
        
        median : double
        
        Returns
        -------
        res1 : double
        
        """
        cdef double rtnval
        rtnval = (<cpp_SimpleRNG.SimpleRNG *> self._inst).GetCauchy(<double> median, <double> scale)
        return float(rtnval)
    
    
    def GetChiSquare(self, degreesOfFreedom):
        """GetChiSquare(self, degreesOfFreedom)
        
        
        Parameters
        ----------
        degreesOfFreedom : double
        
        Returns
        -------
        res1 : double
        
        """
        cdef double rtnval
        rtnval = (<cpp_SimpleRNG.SimpleRNG *> self._inst).GetChiSquare(<double> degreesOfFreedom)
        return float(rtnval)
    
    
    def GetExponential(self, mean=1.0e+0):
        """GetExponential(self, mean=1.0e+0)
        
        
        Parameters
        ----------
        mean : double
        
        Returns
        -------
        res1 : double
        
        """
        cdef double rtnval
        rtnval = (<cpp_SimpleRNG.SimpleRNG *> self._inst).GetExponential(<double> mean)
        return float(rtnval)
    
    
    def GetGamma(self, shape, scale):
        """GetGamma(self, shape, scale)
        
        
        Parameters
        ----------
        shape : double
        
        scale : double
        
        Returns
        -------
        res1 : double
        
        """
        cdef double rtnval
        rtnval = (<cpp_SimpleRNG.SimpleRNG *> self._inst).GetGamma(<double> shape, <double> scale)
        return float(rtnval)
    
    
    def GetInverseGamma(self, shape, scale):
        """GetInverseGamma(self, shape, scale)
        
        
        Parameters
        ----------
        shape : double
        
        scale : double
        
        Returns
        -------
        res1 : double
        
        """
        cdef double rtnval
        rtnval = (<cpp_SimpleRNG.SimpleRNG *> self._inst).GetInverseGamma(<double> shape, <double> scale)
        return float(rtnval)
    
    
    def GetLaplace(self, mean, scale):
        """GetLaplace(self, mean, scale)
        
        
        Parameters
        ----------
        scale : double
        
        mean : double
        
        Returns
        -------
        res1 : double
        
        """
        cdef double rtnval
        rtnval = (<cpp_SimpleRNG.SimpleRNG *> self._inst).GetLaplace(<double> mean, <double> scale)
        return float(rtnval)
    
    
    def GetLogNormal(self, mu, sigma):
        """GetLogNormal(self, mu, sigma)
        
        
        Parameters
        ----------
        mu : double
        
        sigma : double
        
        Returns
        -------
        res1 : double
        
        """
        cdef double rtnval
        rtnval = (<cpp_SimpleRNG.SimpleRNG *> self._inst).GetLogNormal(<double> mu, <double> sigma)
        return float(rtnval)
    
    
    def GetNormal(self, mean=0.0, standardDeviation=1.0e+0):
        """GetNormal(self, mean=0.0, standardDeviation=1.0e+0)
        
        
        Parameters
        ----------
        standardDeviation : double
        
        mean : double
        
        Returns
        -------
        res1 : double
        
        """
        cdef double rtnval
        rtnval = (<cpp_SimpleRNG.SimpleRNG *> self._inst).GetNormal(<double> mean, <double> standardDeviation)
        return float(rtnval)
    
    
    def GetPoisson(self, lamb):
        """GetPoisson(self, lamb)
        
        
        Parameters
        ----------
        lamb : double
        
        Returns
        -------
        res1 : int
        
        """
        cdef int rtnval
        rtnval = (<cpp_SimpleRNG.SimpleRNG *> self._inst).GetPoisson(<double> lamb)
        return int(rtnval)
    
    
    def GetState(self, u, v):
        """GetState(self, u, v)
        
        
        Parameters
        ----------
        u : unsigned int &
        
        v : unsigned int &
        
        Returns
        -------
        res1 : void
        
        """
        (<cpp_SimpleRNG.SimpleRNG *> self._inst).GetState(<xdress_extra_types.uint32 &> long(u), <xdress_extra_types.uint32 &> long(v))
    
    
    def GetStudentT(self, degreesOfFreedom):
        """GetStudentT(self, degreesOfFreedom)
        
        
        Parameters
        ----------
        degreesOfFreedom : double
        
        Returns
        -------
        res1 : double
        
        """
        cdef double rtnval
        rtnval = (<cpp_SimpleRNG.SimpleRNG *> self._inst).GetStudentT(<double> degreesOfFreedom)
        return float(rtnval)
    
    
    def _simplerng_getuint_0(self):
        """GetUint(self)
         This method was overloaded in the C-based source. To overcome
        this we ill put the relevant docstring for each version below.
        Each version will begin with a line of # characters.
        
        
        
        Parameters
        ----------
        None
        
        Returns
        -------
        res1 : unsigned int
        
        ################################################################
        
        
        
        Parameters
        ----------
        u : unsigned int &
        
        v : unsigned int &
        
        Returns
        -------
        res1 : unsigned int
        
        """
        cdef xdress_extra_types.uint32 rtnval
        rtnval = (<cpp_SimpleRNG.SimpleRNG *> self._inst).GetUint()
        return int(rtnval)
    
    
    def _simplerng_getuint_1(self, u, v):
        """GetUint(self, u, v)
         This method was overloaded in the C-based source. To overcome
        this we ill put the relevant docstring for each version below.
        Each version will begin with a line of # characters.
        
        
        
        Parameters
        ----------
        None
        
        Returns
        -------
        res1 : unsigned int
        
        ################################################################
        
        
        
        Parameters
        ----------
        u : unsigned int &
        
        v : unsigned int &
        
        Returns
        -------
        res1 : unsigned int
        
        """
        cdef xdress_extra_types.uint32 rtnval
        rtnval = (<cpp_SimpleRNG.SimpleRNG *> self._inst).GetUint(<xdress_extra_types.uint32 &> long(u), <xdress_extra_types.uint32 &> long(v))
        return int(rtnval)
    
    
    _simplerng_getuint_0_argtypes = frozenset()
    _simplerng_getuint_1_argtypes = frozenset(((0, int), (1, int), ("u", int), ("v", int)))
    
    def GetUint(self, *args, **kwargs):
        """GetUint(self, u, v)
         This method was overloaded in the C-based source. To overcome
        this we ill put the relevant docstring for each version below.
        Each version will begin with a line of # characters.
        
        
        
        Parameters
        ----------
        None
        
        Returns
        -------
        res1 : unsigned int
        
        ################################################################
        
        
        
        Parameters
        ----------
        u : unsigned int &
        
        v : unsigned int &
        
        Returns
        -------
        res1 : unsigned int
        
        """
        types = set([(i, type(a)) for i, a in enumerate(args)])
        types.update([(k, type(v)) for k, v in kwargs.items()])
        # vtable-like dispatch for exactly matching types
        if types <= self._simplerng_getuint_0_argtypes:
            return self._simplerng_getuint_0(*args, **kwargs)
        if types <= self._simplerng_getuint_1_argtypes:
            return self._simplerng_getuint_1(*args, **kwargs)
        # duck-typed dispatch based on whatever works!
        try:
            return self._simplerng_getuint_0(*args, **kwargs)
        except (RuntimeError, TypeError, NameError):
            pass
        try:
            return self._simplerng_getuint_1(*args, **kwargs)
        except (RuntimeError, TypeError, NameError):
            pass
        raise RuntimeError('method GetUint() could not be dispatched')
    
    def _simplerng_getuniform_0(self):
        """GetUniform(self)
         This method was overloaded in the C-based source. To overcome
        this we ill put the relevant docstring for each version below.
        Each version will begin with a line of # characters.
        
        
        
        Parameters
        ----------
        None
        
        Returns
        -------
        res1 : double
        
        ################################################################
        
        
        
        Parameters
        ----------
        u : unsigned int &
        
        v : unsigned int &
        
        Returns
        -------
        res1 : double
        
        """
        cdef double rtnval
        rtnval = (<cpp_SimpleRNG.SimpleRNG *> self._inst).GetUniform()
        return float(rtnval)
    
    
    def _simplerng_getuniform_1(self, u, v):
        """GetUniform(self, u, v)
         This method was overloaded in the C-based source. To overcome
        this we ill put the relevant docstring for each version below.
        Each version will begin with a line of # characters.
        
        
        
        Parameters
        ----------
        None
        
        Returns
        -------
        res1 : double
        
        ################################################################
        
        
        
        Parameters
        ----------
        u : unsigned int &
        
        v : unsigned int &
        
        Returns
        -------
        res1 : double
        
        """
        cdef double rtnval
        rtnval = (<cpp_SimpleRNG.SimpleRNG *> self._inst).GetUniform(<xdress_extra_types.uint32 &> long(u), <xdress_extra_types.uint32 &> long(v))
        return float(rtnval)
    
    
    _simplerng_getuniform_0_argtypes = frozenset()
    _simplerng_getuniform_1_argtypes = frozenset(((0, int), (1, int), ("u", int), ("v", int)))
    
    def GetUniform(self, *args, **kwargs):
        """GetUniform(self, u, v)
         This method was overloaded in the C-based source. To overcome
        this we ill put the relevant docstring for each version below.
        Each version will begin with a line of # characters.
        
        
        
        Parameters
        ----------
        None
        
        Returns
        -------
        res1 : double
        
        ################################################################
        
        
        
        Parameters
        ----------
        u : unsigned int &
        
        v : unsigned int &
        
        Returns
        -------
        res1 : double
        
        """
        types = set([(i, type(a)) for i, a in enumerate(args)])
        types.update([(k, type(v)) for k, v in kwargs.items()])
        # vtable-like dispatch for exactly matching types
        if types <= self._simplerng_getuniform_0_argtypes:
            return self._simplerng_getuniform_0(*args, **kwargs)
        if types <= self._simplerng_getuniform_1_argtypes:
            return self._simplerng_getuniform_1(*args, **kwargs)
        # duck-typed dispatch based on whatever works!
        try:
            return self._simplerng_getuniform_0(*args, **kwargs)
        except (RuntimeError, TypeError, NameError):
            pass
        try:
            return self._simplerng_getuniform_1(*args, **kwargs)
        except (RuntimeError, TypeError, NameError):
            pass
        raise RuntimeError('method GetUniform() could not be dispatched')
    
    def GetWeibull(self, shape, scale):
        """GetWeibull(self, shape, scale)
        
        
        Parameters
        ----------
        shape : double
        
        scale : double
        
        Returns
        -------
        res1 : double
        
        """
        cdef double rtnval
        rtnval = (<cpp_SimpleRNG.SimpleRNG *> self._inst).GetWeibull(<double> shape, <double> scale)
        return float(rtnval)
    
    
    def SetState(self, u, v):
        """SetState(self, u, v)
        
        
        Parameters
        ----------
        u : unsigned int
        
        v : unsigned int
        
        Returns
        -------
        res1 : void
        
        """
        (<cpp_SimpleRNG.SimpleRNG *> self._inst).SetState(<xdress_extra_types.uint32> long(u), <xdress_extra_types.uint32> long(v))
    
    
    

    pass







